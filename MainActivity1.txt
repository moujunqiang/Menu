package com.zz.testmuxer;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.Manifest;
import android.annotation.TargetApi;
import android.content.pm.PackageManager;
import android.media.MediaCodec;
import android.media.MediaExtractor;
import android.media.MediaFormat;
import android.media.MediaMuxer;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class MainActivity extends AppCompatActivity {

    private static final int SAMPLE_SIZE = 1024 * 200;
    private static final int MSG_SUCC = 1;
    private static final int MSG_ERR = -1;
    private static final String OUT_PATH = "/sdcard/Music/out.mp3";
    private WorkHandler mHandler = new WorkHandler();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0);
        Button button = findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                EditText text1 = findViewById(R.id.editTextTextPersonName);
                EditText text2 = findViewById(R.id.editTextTextPersonName2);
                if((TextUtils.isEmpty(text1.getText()) || TextUtils.isEmpty(text2.getText()))
                    && TextUtils.isEmpty(text1.getHint()) || TextUtils.isEmpty(text2.getHint())) {
                    Toast.makeText(MainActivity.this, "必须填入路径才能使用", Toast.LENGTH_LONG).show();
                    return;
                }
                File f1_default = new File(text1.getHint().toString());
                File f2_default = new File(text2.getHint().toString());
                if(f1_default.exists() && f2_default.exists()) {
                    List<String> str = new ArrayList<>();
                    str.add(f1_default.getAbsolutePath());
                    str.add(f2_default.getAbsolutePath());
                    try {
                        mixMP3(str, OUT_PATH, false);
                    } catch (IOException e) {
                        e.printStackTrace();
                        reportErr("写入失败");
                    }
                    return;
                }

                File f1 = new File(text1.getText().toString());
                File f2 = new File(text2.getText().toString());
                if(!f1.exists()) {
                    Toast.makeText(MainActivity.this, f1.getAbsolutePath()+"不存在", Toast.LENGTH_LONG).show();
                    return;
                }
                if(!f2.exists()) {
                    Toast.makeText(MainActivity.this, f2.getAbsolutePath()+"不存在", Toast.LENGTH_LONG).show();
                    return;
                }
                List<String> str = new ArrayList<>();
                str.add(f1.getAbsolutePath());
                str.add(f2.getAbsolutePath());
                try {
                    mixMP3(str, OUT_PATH, true);
                } catch (IOException e) {
                    e.printStackTrace();
                    Message msg = mHandler.obtainMessage(MSG_ERR);
                    msg.obj = "写入失败";
                    mHandler.sendMessage(msg);
                }
            }
        });
    }

    /**
     * @param paths   需要合并的音频地址
     * @param outPath 输出合并后的音频地址
     * @param isAdd   是否追加
     * @throws IOException
     */
    public void mixMP3(List<String> paths, String outPath, boolean isAdd) throws IOException {
        File file = new File(outPath);
        if (file.exists()) {
            file.delete();
        }
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outPath, isAdd), SAMPLE_SIZE);
        for (int i = 0; i < paths.size(); i++) {
            MediaExtractor extractor = new MediaExtractor();
            extractor.setDataSource(paths.get(i));
            int track = getAudioTrack(extractor);
            if (track < 0) {
                return;
            }
            //选择音频轨道
            extractor.selectTrack(track);
            while (true) {
                ByteBuffer buffer = ByteBuffer.allocate(SAMPLE_SIZE);
                int sampleSize = extractor.readSampleData(buffer, 0);
                if (sampleSize <= 0) {
                    break;
                }
                byte[] buf = new byte[sampleSize];
                buffer.get(buf, 0, sampleSize);
                //写入文件
                outputStream.write(buf);
                //音轨数据往前读
                extractor.advance();
            }
            extractor.release();
        }
        outputStream.close();
        mHandler.sendEmptyMessage(MSG_SUCC);
    }

    /**
     * 获取音频数据轨道
     *
     * @param extractor
     * @return
     */
    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
    private static int getAudioTrack(MediaExtractor extractor) {
        for (int i = 0; i < extractor.getTrackCount(); i++) {
            MediaFormat format = extractor.getTrackFormat(i);
            String mime = format.getString(MediaFormat.KEY_MIME);
            if (Objects.requireNonNull(mime).startsWith("audio")) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if(requestCode == 0) {
            for(int i : grantResults) {
                if(i != PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "需要允许权限才能使用", Toast.LENGTH_LONG).show();
                    finish();
                    return;
                }
            }
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

    class WorkHandler extends Handler{
        @Override
        public void handleMessage(@NonNull Message msg) {
            switch (msg.what) {
                case MSG_SUCC:
                    reportSucc();
                    break;
                case MSG_ERR:
                    String err = (String) msg.obj;
                    reportErr(err);
                    break;
            }
            super.handleMessage(msg);
        }
    }

    private void reportSucc(){
        TextView view = findViewById(R.id.result);
        view.setText("合并成功,输出路径为:"+OUT_PATH);
        view.setVisibility(View.VISIBLE);
    }

    private void reportErr(String msg){
        TextView view = findViewById(R.id.result);
        view.setText("合并失败,"+msg);
        view.setVisibility(View.VISIBLE);
    }
}
